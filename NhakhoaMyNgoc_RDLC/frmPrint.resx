<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACwtsAA3Nm7ANXUvQbb2rsj3dy7TN7cu23e3Lt83ty7e93cu2vd27xJ3dq8INjUvQTb17wAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACys8gA3Nu8ANjXvAvd27xQ3t27qeDeu+Lg3rz73927/97cuf/e3Ln/3926/+DevPvh3rzf3927od3b
        u0bZ170I29q8AKaw0gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA1tW8AP//vgDe3Lwv4N+9quLgvfbf3rr/1dSz9sfFp8+6t5yktrSZibOxl4a2tJmbwsCjw9HP
        ru7d27j/4N67897du6Hd2rso5/CxANjRwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AD/+AAB//wAA///AA///8A////////////8=
</value>
  </data>
</root>